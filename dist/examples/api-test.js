"use strict";
/**
 * Esempio completo che mostra le differenze tra i vari metodi dell'API ShogunCore
 *
 * Questo esempio dimostra:
 * - get() vs getData() vs getNode() vs node() vs chain()
 * - put() vs set() vs putUserData() vs setUserData()
 * - remove() vs removeUserData()
 * - Operazioni globali vs operazioni utente
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.demonstrateAPIDifferences = demonstrateAPIDifferences;
exports.showAPIDifferences = showAPIDifferences;
const api_1 = require("../gundb/api");
async function demonstrateAPIDifferences() {
    console.log("üöÄ Iniziamo il test delle differenze API...\n");
    // 1. Setup iniziale
    const quickStart = new api_1.AutoQuickStart({
        peers: ["https://peer.wallie.io/gun"],
        appScope: "test-api",
    });
    await quickStart.init();
    const api = quickStart.api;
    console.log("‚úÖ Setup completato\n");
    // 2. Test operazioni GLOBALI (senza autenticazione)
    console.log("üìä === TEST OPERAZIONI GLOBALI ===\n");
    // Test get() - restituisce dati direttamente o null
    console.log("üîç Test get():");
    const globalData = await api.get("global/test");
    console.log('get("global/test"):', globalData); // null se non esiste
    // Test getNode() - restituisce nodo Gun per operazioni di chaining
    console.log("\nüîó Test getNode():");
    const globalNode = api.getNode("global/test");
    console.log('getNode("global/test"):', typeof globalNode); // Gun node object
    // Test node() - alias di getNode()
    console.log("\nüîó Test node():");
    const globalNode2 = api.node("global/test");
    console.log('node("global/test"):', typeof globalNode2); // Gun node object
    // Test chain() - wrapper con metodi di convenienza
    console.log("\n‚õìÔ∏è Test chain():");
    const globalChain = api.chain("global/test");
    console.log('chain("global/test"):', Object.keys(globalChain)); // ['get', 'put', 'set', 'once', 'then', 'map']
    // Test put() vs set() - operazioni globali
    console.log("\nüíæ Test put() vs set():");
    const testData = { message: "Hello Global!", timestamp: Date.now() };
    const putResult = await api.put("global/test", testData);
    console.log("put() result:", putResult); // boolean
    const setResult = await api.set("global/test2", {
        ...testData,
        method: "set",
    });
    console.log("set() result:", setResult); // boolean
    // Verifica che i dati siano stati salvati
    const retrievedData1 = await api.get("global/test");
    const retrievedData2 = await api.get("global/test2");
    console.log("Retrieved put data:", retrievedData1);
    console.log("Retrieved set data:", retrievedData2);
    // Test remove() - operazione globale
    console.log("\nüóëÔ∏è Test remove():");
    const removeResult = await api.remove("global/test2");
    console.log("remove() result:", removeResult); // boolean
    const removedData = await api.get("global/test2");
    console.log("Data after remove:", removedData); // null
    // 3. Test autenticazione
    console.log("\n\nüîê === TEST AUTENTICAZIONE ===\n");
    const username = "testuser_" + Date.now();
    const password = "testpass123";
    // Test signup
    console.log("üìù Test signup():");
    const signupResult = await api.signup(username, password);
    console.log("signup result:", signupResult);
    if (signupResult) {
        console.log("‚úÖ Utente creato:", signupResult.username);
        // Test login
        console.log("\nüîë Test login():");
        const loginResult = await api.login(username, password);
        console.log("login result:", loginResult);
        if (loginResult) {
            console.log("‚úÖ Login riuscito:", loginResult.username);
            // 4. Test operazioni UTENTE (con autenticazione)
            console.log("\n\nüë§ === TEST OPERAZIONI UTENTE ===\n");
            // Test getUserData() - restituisce dati utente direttamente
            console.log("üîç Test getUserData():");
            const userData = await api.getUserData("profile");
            console.log('getUserData("profile"):', userData); // null se non esiste
            // Test putUserData() vs setUserData() - operazioni utente
            console.log("\nüíæ Test putUserData() vs setUserData():");
            const profileData = {
                name: "Test User",
                email: "test@example.com",
                bio: "Test bio",
                preferences: {
                    theme: "dark",
                    notifications: true,
                },
            };
            const putUserResult = await api.putUserData("profile", profileData);
            console.log("putUserData() result:", putUserResult); // boolean
            const settingsData = {
                language: "it",
                timezone: "Europe/Rome",
                privacy: "public",
            };
            const setUserResult = await api.setUserData("settings", settingsData);
            console.log("setUserData() result:", setUserResult); // boolean
            // Verifica che i dati utente siano stati salvati
            const retrievedProfile = await api.getUserData("profile");
            const retrievedSettings = await api.getUserData("settings");
            console.log("Retrieved profile:", retrievedProfile);
            console.log("Retrieved settings:", retrievedSettings);
            // Test getUserNode() - nodo utente per operazioni avanzate
            console.log("\nüîó Test getUserNode():");
            try {
                const userNode = api.getUserNode("profile");
                console.log('getUserNode("profile"):', typeof userNode); // Gun node object
            }
            catch (error) {
                console.log("getUserNode error:", error.message);
            }
            // Test removeUserData() - rimozione dati utente
            console.log("\nüóëÔ∏è Test removeUserData():");
            const removeUserResult = await api.removeUserData("settings");
            console.log("removeUserData() result:", removeUserResult); // boolean
            const removedUserData = await api.getUserData("settings");
            console.log("User data after remove:", removedUserData); // null
            // 5. Test metodi di convenienza
            console.log("\n\nüõ†Ô∏è === TEST METODI DI CONVENIENZA ===\n");
            // Test updateProfile()
            console.log("üë§ Test updateProfile():");
            const profileUpdate = {
                name: "Updated Test User",
                bio: "Updated bio",
                avatar: "https://example.com/avatar.jpg",
            };
            const profileResult = await api.updateProfile(profileUpdate);
            console.log("updateProfile() result:", profileResult);
            const updatedProfile = await api.getProfile();
            console.log("Updated profile:", updatedProfile);
            // Test saveSettings()
            console.log("\n‚öôÔ∏è Test saveSettings():");
            const settings = {
                theme: "light",
                language: "en",
                notifications: false,
            };
            const settingsResult = await api.saveSettings(settings);
            console.log("saveSettings() result:", settingsResult);
            const savedSettings = await api.getSettings();
            console.log("Saved settings:", savedSettings);
            // Test createCollection()
            console.log("\nüìö Test createCollection():");
            const todos = {
                "1": { id: "1", text: "Learn ShogunCore", completed: false },
                "2": { id: "2", text: "Build awesome app", completed: false },
                "3": { id: "3", text: "Deploy to production", completed: true },
            };
            const collectionResult = await api.createCollection("todos", todos);
            console.log("createCollection() result:", collectionResult);
            const todosCollection = await api.getCollection("todos");
            console.log("Todos collection:", todosCollection);
            // Test addToCollection()
            console.log("\n‚ûï Test addToCollection():");
            const newTodo = { id: "4", text: "Test API methods", completed: false };
            const addResult = await api.addToCollection("todos", "4", newTodo);
            console.log("addToCollection() result:", addResult);
            const updatedCollection = await api.getCollection("todos");
            console.log("Updated collection:", updatedCollection);
            // Test removeFromCollection()
            console.log("\n‚ûñ Test removeFromCollection():");
            const removeFromCollectionResult = await api.removeFromCollection("todos", "3");
            console.log("removeFromCollection() result:", removeFromCollectionResult);
            const finalCollection = await api.getCollection("todos");
            console.log("Final collection:", finalCollection);
            // 6. Test utility methods
            console.log("\n\nüîß === TEST METODI UTILITY ===\n");
            // Test getCurrentUser()
            console.log("üë§ Test getCurrentUser():");
            const currentUser = api.getCurrentUser();
            console.log("Current user:", currentUser);
            // Test isLoggedIn()
            console.log("\nüîê Test isLoggedIn():");
            const isLoggedIn = api.isLoggedIn();
            console.log("Is logged in:", isLoggedIn);
            // Test userExists()
            console.log("\nüîç Test userExists():");
            const userExists = await api.userExists(username);
            console.log(`User ${username} exists:`, userExists);
            // Test getUser()
            console.log("\nüë• Test getUser():");
            const userInfo = await api.getUser(username);
            console.log("User info:", userInfo);
            // Test logout
            console.log("\nüö™ Test logout():");
            api.logout();
            const isLoggedInAfter = api.isLoggedIn();
            console.log("Is logged in after logout:", isLoggedInAfter);
        }
        else {
            console.log("‚ùå Login fallito");
        }
    }
    else {
        console.log("‚ùå Signup fallito");
    }
    // 7. Test array utilities
    console.log("\n\nüìä === TEST ARRAY UTILITIES ===\n");
    const testArray = [
        { id: "1", name: "Item 1", value: 100 },
        { id: "2", name: "Item 2", value: 200 },
        { id: "3", name: "Item 3", value: 300 },
    ];
    console.log("Original array:", testArray);
    // Test arrayToIndexedObject()
    const indexedObject = api.arrayToIndexedObject(testArray);
    console.log("Array to indexed object:", indexedObject);
    // Test indexedObjectToArray()
    const backToArray = api.indexedObjectToArray(indexedObject);
    console.log("Indexed object back to array:", backToArray);
    console.log("\n‚úÖ Test completato!");
}
// Funzione per mostrare le differenze principali
function showAPIDifferences() {
    console.log(`
üìã === RIEPILOGO DIFFERENZE API ===

üîç METODI GET:
‚Ä¢ get(path)           ‚Üí Restituisce dati direttamente o null
‚Ä¢ getNode(path)       ‚Üí Restituisce nodo Gun per chaining (.map(), .on(), etc.)
‚Ä¢ node(path)          ‚Üí Alias di getNode()
‚Ä¢ chain(path)         ‚Üí Wrapper con metodi di convenienza (get, put, set, once, then, map)
‚Ä¢ getUserData(path)   ‚Üí Come get() ma per dati utente (richiede login)

üíæ METODI PUT/SET:
‚Ä¢ put(path, data)     ‚Üí Salva dati globali, restituisce boolean
‚Ä¢ set(path, data)     ‚Üí Come put() ma con semantica diversa
‚Ä¢ putUserData(path, data) ‚Üí Salva dati utente, restituisce boolean
‚Ä¢ setUserData(path, data) ‚Üí Come putUserData() ma con semantica diversa

üóëÔ∏è METODI REMOVE:
‚Ä¢ remove(path)        ‚Üí Rimuove dati globali, restituisce boolean
‚Ä¢ removeUserData(path) ‚Üí Rimuove dati utente, restituisce boolean

üîê AUTENTICAZIONE:
‚Ä¢ signup(username, password) ‚Üí Crea nuovo utente
‚Ä¢ login(username, password)  ‚Üí Autentica utente esistente
‚Ä¢ logout()                   ‚Üí Disconnette utente
‚Ä¢ isLoggedIn()               ‚Üí Controlla se utente √® autenticato

üë§ UTILITY UTENTE:
‚Ä¢ getCurrentUser()    ‚Üí Info utente corrente
‚Ä¢ getUser(alias)      ‚Üí Info utente per alias
‚Ä¢ userExists(alias)   ‚Üí Controlla se utente esiste

üõ†Ô∏è METODI DI CONVENIENZA:
‚Ä¢ updateProfile(data) ‚Üí Aggiorna profilo utente
‚Ä¢ getProfile()        ‚Üí Ottiene profilo utente
‚Ä¢ saveSettings(data)  ‚Üí Salva impostazioni utente
‚Ä¢ getSettings()       ‚Üí Ottiene impostazioni utente
‚Ä¢ createCollection(name, items) ‚Üí Crea collezione
‚Ä¢ addToCollection(name, id, item) ‚Üí Aggiunge item a collezione
‚Ä¢ getCollection(name) ‚Üí Ottiene collezione
‚Ä¢ removeFromCollection(name, id) ‚Üí Rimuove item da collezione

üìä ARRAY UTILITIES:
‚Ä¢ arrayToIndexedObject(arr) ‚Üí Converte array in oggetto indicizzato per GunDB
‚Ä¢ indexedObjectToArray(obj) ‚Üí Converte oggetto indicizzato in array
  `);
}
// Esegui il test
if (require.main === module) {
    showAPIDifferences();
    demonstrateAPIDifferences().catch(console.error);
}
